#!/usr/bin/python
import obelisk
import hashlib
import sys

def uncover_stealth(master_secret, nonce):
    S1 = obelisk.diffie_hellman(master_secret, nonce)
    c = hashlib.sha256(S1).digest()
    # Generate the specific secret for this keypair from our master
    secret = obelisk.add_mod_n(master_secret, c)
    # Now find the address.
    secret_int = obelisk.string_to_number(secret)
    G = obelisk.generator_secp256k1
    point = secret_int * G
    pubkey = obelisk.get_point_pubkey(point, True)
    address = obelisk.public_key_to_bc_address(pubkey)
    return address, secret.encode("hex")

def main(argv):
    if len(argv) != 3:
        print >> sys.stderr, "sx stealth-recv SECRET NONCE"
        return -1
    secret = argv[1]
    nonce = argv[2]
    secret = secret.decode("hex")
    nonce = nonce.decode("hex")
    # Start the process...
    address, secret = uncover_stealth(secret, nonce)
    print "Address:", address
    print "Secret:", secret
    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))

