/**
 * Copyright (c) 2011-2015 libbitcoin developers (see AUTHORS)
 *
 * This file is part of libbitcoin-explorer.
 *
 * libbitcoin-explorer is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License with
 * additional permissions to the one published by the Free Software
 * Foundation, either version 3 of the License, or (at your option)
 * any later version. For more information see LICENSE.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#include "command.hpp"

BX_USING_NAMESPACES()

BOOST_AUTO_TEST_SUITE(stub)
BOOST_AUTO_TEST_SUITE(qrcode__invoke)

#if defined WITH_QRENCODE && defined WITH_LIBPNG
BOOST_AUTO_TEST_CASE(qrcode__invoke__always__failure_error)
{
    BX_DECLARE_COMMAND(qrcode);
    command.set_size_option(0);
    BX_REQUIRE_FAILURE(command.invoke(output, error));
    BX_REQUIRE_ERROR(BX_QRCODE_WRITE_ERROR "\n");
}

BOOST_AUTO_TEST_CASE(qrcode__invoke__size_one)
{
    BX_DECLARE_COMMAND(qrcode);
    std::string filename = "test_qrout.png";

    const unsigned char test_qrout_png[] = {
        0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
        0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x21,
        0x01, 0x03, 0x00, 0x00, 0x00, 0x6d, 0x2a, 0x50, 0x2c, 0x00, 0x00, 0x00,
        0x06, 0x50, 0x4c, 0x54, 0x45, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xa5,
        0xd9, 0x9f, 0xdd, 0x00, 0x00, 0x00, 0x02, 0x74, 0x52, 0x4e, 0x53, 0xff,
        0xff, 0xc8, 0xb5, 0xdf, 0xc7, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59,
        0x73, 0x00, 0x00, 0x0a, 0xf8, 0x00, 0x00, 0x0a, 0xf8, 0x01, 0x66, 0x26,
        0x3c, 0xfd, 0x00, 0x00, 0x00, 0xb1, 0x49, 0x44, 0x41, 0x54, 0x08, 0x99,
        0x63, 0xf8, 0x0f, 0x02, 0x0c, 0x10, 0xf2, 0x40, 0x29, 0x37, 0xe3, 0x7f,
        0x86, 0xfb, 0x61, 0xa6, 0xb5, 0xff, 0x19, 0x2e, 0xd6, 0xda, 0xba, 0x02,
        0x49, 0x17, 0x5f, 0x10, 0x99, 0x77, 0x19, 0x48, 0xde, 0xf7, 0xdc, 0x0b,
        0x14, 0x3f, 0x10, 0x1a, 0x0a, 0x54, 0xf3, 0xff, 0xb1, 0x2d, 0x50, 0xfd,
        0x41, 0x2e, 0xa9, 0xd5, 0xff, 0x19, 0xae, 0x5c, 0x9d, 0x28, 0xf9, 0x9f,
        0xe1, 0x79, 0xf9, 0xb4, 0xe3, 0xff, 0x19, 0x4e, 0xcf, 0xad, 0xc9, 0xfe,
        0xcf, 0x70, 0x21, 0x55, 0x77, 0xfb, 0x7f, 0x86, 0x37, 0xef, 0x6e, 0x1d,
        0x05, 0xaa, 0x11, 0xd8, 0xd6, 0xfe, 0x9f, 0xe1, 0xcc, 0x69, 0x73, 0x7e,
        0xa0, 0x48, 0x95, 0xd7, 0xc6, 0xff, 0x0c, 0x67, 0xcf, 0x4e, 0x14, 0xfc,
        0xcf, 0x70, 0xc3, 0xce, 0xf4, 0xfd, 0x7f, 0x86, 0xcb, 0x7b, 0xe5, 0x4e,
        0x02, 0x4d, 0xf6, 0xd1, 0x10, 0x06, 0x9a, 0x79, 0xff, 0xe8, 0x41, 0xa0,
        0xf9, 0x1e, 0x9c, 0xe1, 0x40, 0x91, 0xe2, 0xc0, 0x9b, 0x40, 0x7b, 0xa3,
        0xff, 0x30, 0x82, 0xdc, 0x70, 0x1f, 0xa8, 0xeb, 0x62, 0x9c, 0xea, 0x65,
        0xa0, 0x78, 0xc8, 0x84, 0xd9, 0x40, 0x35, 0xbe, 0x56, 0xc7, 0x61, 0x6e,
        0x06, 0x93, 0x00, 0xc5, 0x58, 0x70, 0x78, 0xc2, 0x7c, 0x0a, 0x57, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
    };
    const unsigned int test_qrout_png_len = 287;

    command.set_size_option(1);
    command.set_payment_address_argument(libbitcoin::wallet::payment_address(
        "12u8rC4Pxih4m59eApanRDodXcPxWiaKgg"));
    command.set_filename_argument(filename);

    BX_REQUIRE_OKAY(command.invoke(output, error));

    FILE *f = fopen(filename.c_str(), "rb");
    unsigned char data[test_qrout_png_len] = {0};
    fread(data, test_qrout_png_len, 1, f);
    fclose(f);

    //Read in the generated qrcode png and compare to known good output
    BOOST_REQUIRE(std::memcmp(test_qrout_png, data,
        test_qrout_png_len) == 0);

    // Clean-up and remove qrcode png file
    BOOST_REQUIRE(remove(filename.c_str()) == 0);
}

#else
BOOST_AUTO_TEST_CASE(qrcode__invoke__always__failure_error)
{
    BX_DECLARE_COMMAND(qrcode);
    BX_REQUIRE_FAILURE(command.invoke(output, error));
    BX_REQUIRE_ERROR(BX_QRCODE_REQUIRES_QRENCODE_AND_LIBPNG "\n");
}
#endif

BOOST_AUTO_TEST_SUITE_END()
BOOST_AUTO_TEST_SUITE_END()
