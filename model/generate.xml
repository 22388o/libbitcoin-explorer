<?xml version = "1.0" ?>
<generate script="generate.gsl">

  <command symbol="satoshi" category="UTILITY" subcategory="SATOSHI MATH">
    <description value="Convert Bitcoins into Satoshis." />
    <example value="sx satoshi BTC" />
    <explanation value="Convert Bitcoins into Satoshis." />
  </command>
  
  <command symbol="btc" category="UTILITY" subcategory="SATOSHI MATH">
    <description value="Convert Satoshis into Bitcoins." />
    <example value="sx btc SATOSHIS" />
    <explanation value="Convert Satoshis into Bitcoins." />
  </command>
  
  <command symbol="showscript" category="OFFLINE TRANSACTIONS" subcategory="SCRIPTING">
    <description value="Show the details of a raw script." />
    <example value="sx showscript" />
    <explanation value="Show the details of a raw script." />
  </command>
  
  <command symbol="scripthash" category="OFFLINE KEYS AND ADDRESSES" subcategory="MULTISIG ADDRESSES">
    <description value="Create BIP 16 script hash address from raw script hex." />
    <example value="sx scripthash" />
    <explanation value="Create BIP 16 script hash address from raw script hex (from STDIN)." />
    <explanation value="" />
    <explanation value="EXAMPLE:" />
    <explanation value="" />
    <explanation value="  # generate an address for 2-of-3 multisig transactions" />
    <explanation value="  for n in 1 2 3; do echo 'b220b5bd2909df1d74b71c9e664233bf' | sx genpriv $n > key${n}; done" />
    <explanation value="  sx rawscript 2 [ $(cat key1 | sx pubkey) ] [ $(cat key2 | sx pubkey) ] [ $(cat key3 | sx pubkey) ] 3 checkmultisig | sx scripthash" />
    <explanation value="  33opBmv3oJTXu6rxtzsr571SL2Srtw9Cg8" />    
  </command>
  
  <command symbol="rawscript" category="OFFLINE TRANSACTIONS" subcategory="SCRIPTING">
    <description value="Create the raw hex representation from a script." />
    <example value="sx rawscript [ARGS]..." />
    <explanation value="Create the raw hex representation from a script." />
    <explanation value="" />
    <explanation value="EXAMPLE:" />
    <explanation value="  $ sx rawscript dup # translate a single opcode just for demonstration, see OP_DUP in https://en.bitcoin.it/wiki" />
    <explanation value="  76" />
  </command>

  <command symbol="initchain" category="ONLINE (OBELISK)" subcategory="OBELISK ADMIN">
    <description value="Initialize a new blockchain." />
    <example value="sx initchain DIRECTORY" />
    <explanation value="Initialize a new blockchain." />
  </command>

  <command symbol="wallet" category="EXPERIMENTAL" subcategory="APPS">
    <description value="Experimental command line wallet." />
    <example value="sx wallet SEED" />
    <explanation value="This is an experimental prototype." />
    <define symbol="NO_MASTER_PUBLIC_KEY" value="No valid master public key or private secret key was passed in." />
  </command>

  <command symbol="monitor" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN WATCHING">
    <description value="Monitor an address prefix." />
    <example value="sx monitor PREFIX" />
    <explanation value="Monitor an address prefix." />
  </command>

  <command symbol="validaddr" category="OFFLINE KEYS AND ADDRESSES" subcategory="BASIC">
    <description value="Validate an address." />
    <example value="sx validaddr ADDRESS" />
    <explanation value="Validate an address." />
  </command>

  <command symbol="validtx" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES">
    <description value="Validate a transaction." />
    <example value="sx validtx FILENAME" />
    <explanation value="Query blockchain whether transaction has been confirmed." />
  </command>

  <command symbol="pubkey" category="OFFLINE KEYS AND ADDRESSES" subcategory="BASIC">
    <description value="See the public part of a private key." />
    <example value="sx pubkey [OPTION]" />
    <explanation value="" />
    <explanation value="  -c, --compressed      Use compressed public key format." />
    <explanation value="  -u, --uncompressed    Use uncompressed public key format." />
    <explanation value="Read private or public key from STDIN and output the public key." />
  </command>
  
  <command symbol="addr" category="OFFLINE KEYS AND ADDRESSES" subcategory="BASIC">
    <description value="See Bitcoin address of a public or private key." />
    <example value="sx addr" />
    <explanation value="Read public or private key from STDIN and output Bitcoin address." />
  </command>

  <command symbol="ripemd-hash" category="UTILITY" subcategory="HASHES">
    <description value="RIPEMD hash data from STDIN." />
    <example value="sx ripemd-hash" />
    <explanation value="RIPEMD hash data from STDIN." />
  </command>

  <command symbol="wrap" category="OFFLINE TRANSACTIONS" subcategory="SCRIPTING">
    <description value="Adds version byte and checksum to hexstring." />
    <example value="sx wrap HEXSTRING VERSION_BYTE" />
    <!--<example value="echo HEXSTRING | sx wrap VERSION_BYTE" />-->
    <explanation value="Adds version byte and checksum to hexstring." />
  </command>

  <command symbol="unwrap" category="OFFLINE TRANSACTIONS" subcategory="SCRIPTING">
    <description value="Validates checksum and recovers version byte and original data from hexstring." />
    <example value="sx wrap HEXSTRING VERSION_BYTE" />
    <!--<example value="echo HEXSTRING | sx wrap VERSION_BYTE" />-->
    <explanation value="Validates checksum and recovers version byte and original data from hexstring." />
  </command>

  <command symbol="base58-decode" category="UTILITY" subcategory="FORMAT (BASE 58)">
    <description value="Convert from base58 to hex." />
    <example value="sx base58-decode B58STRING" />
    <!--<example value="echo B58STRING | sx base58-decode" />-->
    <explanation value="Convert from base58 to hex." />
  </command>

  <command symbol="base58-encode" category="UTILITY" subcategory="FORMAT (BASE 58)">
    <description value="Convert from hex to base58." />
    <example value="sx base58-encode HEXSTRING" />
    <!--<example value="echo HEXSTRING | sx base58-encode" />-->
    <explanation value="Convert from hex to base58." />
  </command>

  <command symbol="base58check-decode" category="UTILITY" subcategory="FORMAT (BASE58CHECK)">
    <description value="Convert from base58check to hex." />
    <example value="sx base58check-decode B58STRING" />
    <!--<example value="echo B58STRING | sx base58check-decode" />-->
    <explanation value="Convert from base58check to hex." />
  </command>

  <command symbol="base58check-encode" category="UTILITY" subcategory="FORMAT (BASE58CHECK)">
    <description value="Convert from hex to base58check." />
    <example value="sx base58check-encode HEXSTRING" />
    <!--<example value="echo HEXSTRING | sx base58check-encode" />-->
    <explanation value="Convert from hex to base58check." />
  </command>

  <command symbol="sendtx-obelisk" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN UPDATES">
    <description value="Send tx to obelisk server." />
    <example value="sx sendtx-obelisk FILENAME" />
    <explanation value="Broadcast the transaction to an obelisk server for the network." />
    <explanation value="" />
    <explanation value="  $ sx sendtx-obelisk txfile.tx" />
  </command>

  <command symbol="sendtx-p2p" category="ONLINE (BITCOIN P2P)" subcategory="BLOCKCHAIN UPDATES">
    <description value="Send tx to bitcoin network." />
    <example value="sx sendtx-p2p FILENAME" />
    <explanation value="Broadcast the transaction to the Bitcoin network." />
    <explanation value="" />
    <explanation value="  $ sx sendtx-p2p txfile.tx" />
  </command>

  <command symbol="sendtx-bci" category="ONLINE (BLOCKCHAIN.INFO)" subcategory="BLOCKCHAIN UPDATES">
    <description value="Send tx to blockchain.info/pushtx." />
    <example value="sx bci-push-tx FILENAME" />
    <explanation value="Send tx to blockchain.info/pushtx." />
    <explanation value="" />
    <explanation value="  $ sx sendtx-bci txfile.tx" />
  </command>

  <command symbol="blke-fetch-transaction" category="ONLINE (BLOCKEXPLORER.COM)" subcategory="BLOCKCHAIN QUERIES (blockexplorer.com)">
    <description value="Fetches a transaction from blockexplorer.com" />
    <example value="sx blke-fetch-transaction HASH" />
    <explanation value="Fetches a transaction from blockexplorer.com" />
    <explanation value="" />
    <explanation value="  $ sx blke-fetch-transaction HASH" />
  </command>

  <command symbol="genpriv" category="DEPRECATED" subcategory="ELECTRUM STYLE DETERMINISTIC KEYS AND ADDRESSES">
    <description value="Generate a private key deterministically from a seed." />
    <example value="sx genpriv N [CHANGE]" />
    <explanation value="Generate private keys from a wallet seed." />
    <explanation value="" />
    <explanation value="  $ cat wallet.seed | sx genpriv 0" />
    <explanation value="  5Jmb4EYzEqj63rkPwADFY7WyGV2kga3YB1HfDAzg9dHNG57NMPu" />
    <explanation value="  $ cat wallet.seed | sx genpriv 1" />
    <explanation value="  5KjCYpPyxU2e88S57b1naKUsJ1JNjCudkFSQPxqcYyBYgzzahNe" />
  </command>

  <command symbol="genpub" category="DEPRECATED" subcategory="ELECTRUM STYLE DETERMINISTIC KEYS AND ADDRESSES">
    <description value="Generate a public key deterministically from a wallet" />
    <description value="seed or master public key." />
    <example value="sx genpub N [CHANGE]" />
    <explanation value="Generate public key from a wallet seed or master public key." />
    <explanation value="The output is non-deterministic if any other input is used." />
    <explanation value="" />
    <explanation value="  $ cat wallet.seed | sx genpub 0" />
    <explanation value="  040a053d0a42d58b7e34346daae9d40ce33fad5d65bbaa6c615a2b76447734b2c712b5d45de839b2e5e7ac00201cbea3d2d376cfcc7a3f3f508f1e6761f6c271bf" />
  </command>

  <command symbol="genaddr" category="DEPRECATED" subcategory="ELECTRUM STYLE DETERMINISTIC KEYS AND ADDRESSES">
    <description value="Generate a Bitcoin address deterministically from a wallet" />
    <description value="seed or master public key." />
    <example value="sx genaddr N [CHANGE] [RANGESTOP]" />
    <explanation value="Generate Bitcoin addresses from a wallet seed or master public key." />
    <explanation value="The output is non-deterministic if any other input is used." />
    <explanation value="" />
    <explanation value="  $ cat wallet.seed | sx genaddr 0" />
    <explanation value="  1a4b47AC4ydSnAAcTNH1qozHq2pwJb644" />
  </command>

  <command symbol="qrcode" category="UTILITY" subcategory="MISC">
    <description value="Generate Bitcoin QR codes offline." />
    <example value="sx qrcode" />
    <explanation value="Make sure you have the program 'qrencode' installed first." />
    <explanation value="" />
    <explanation value="  $ sudo apt-get install qrencode" />
    <explanation value="  $ sx qrcode 13Ft7SkreJY9D823NPm4t6D1cBqLYTJtAe qrcode.png" />
  </command>
  
  <command symbol="fetch-block-header" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES">
    <description value="Fetch raw block header." />
    <example value="sx fetch-block-header [HASH] [HEIGHT]" />
    <explanation value="The fetch-block-header tool uses a network connection to make requests against" />
    <explanation value="the load balancer backend." />
  </command>

  <command symbol="fetch-last-height" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES">
    <description value="Fetch the last block height." />
    <example value="sx fetch-last-height" />
    <explanation value="The fetch-last-height tool uses a network connection to make requests against" />
    <explanation value="the load balancer backend." />
  </command>

  <command symbol="bci-fetch-last-height" category="ONLINE (BLOCKCHAIN.INFO)" subcategory="BLOCKCHAIN QUERIES (blockchain.info)">
    <description value="Fetch the last block height using blockchain.info." />
    <example value="sx bci-fetch-last-height" />
    <explanation value="" />
    <explanation value="Fetch the last block height using blockchain.info." />
  </command>
  
  <command symbol="fetch-stealth" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES">
    <description value="Fetch a stealth information using a network connection to" />
    <description value="make requests against the obelisk load balancer backend." />
    <example value="sx fetch-stealth NUMBER_BITS BITFIELD [FROM_HEIGHT]" />
    <explanation value="Fetch a stealth information using a network connection to" />
    <explanation value="make requests against the obelisk load balancer backend." />
    <explanation value="" />
    <explanation value="Default NUMBER_BITS is 0 (if not specified)." />
    <explanation value="" />
    <explanation value="EXAMPLE:" />
    <explanation value="" />
    <explanation value="  $ sx fetch-stealth 2 8bf41c69" />
  </command>

  <command symbol="fetch-transaction" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES">
    <description value="Fetch a raw transaction using a network connection to" />
    <description value="make requests against the obelisk load balancer backend." />
    <example value="sx fetch-transaction HASH" />
    <explanation value="Fetch a raw transaction using a network connection to" />
    <explanation value="make requests against the obelisk load balancer backend." />
    <explanation value="" />
    <explanation value="EXAMPLE:" />
    <explanation value="" />
    <explanation value="  $ sx fetch-transaction 69735d70ada1be32ff39b49c6fc2390b03e9d5eed8918ed10fe42c8cbabf62d4 # fetches raw data" />
  </command>

  <command symbol="fetch-transaction-index" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES">
    <description value="Fetch block height and index in block of transaction." />
    <example value="sx fetch-transaction-index HASH" />
    <explanation value="The fetch-transaction-index tool uses a network connection to make requests" />
    <explanation value="against the load balancer backend." />
  </command>

  <command symbol="balance" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES">
    <description value="Show balance of a Bitcoin address in satoshis." />
    <example value="sx balance [-j] ADDRESS1 [ADDRESS2...]" />
    <explanation value="The balance tool uses a network connection to make requests against the" />
    <explanation value="load balancer backend." />
    <explanation value="" />
    <explanation value="  -j, --json                 Enable json parseable output." />
    <explanation value="" />
    <explanation value="Example:" />
    <explanation value="" />
    <explanation value="  $ echo 134HfD2fdeBTohfx8YANxEpsYXsv5UoWyz | sx balance" />
    <explanation value="  Address: 134HfD2fdeBTohfx8YANxEpsYXsv5UoWyz" />
    <explanation value="    Paid balance:    0" />
    <explanation value="    Pending balance: 0" />
    <explanation value="    Total received:  100000" />
  </command>

  <command symbol="history" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES">
    <description value="Get list of output points, values, and their spends for an" />
    <description value="address. grep can filter for just unspent outputs which can" />
    <description value="be fed into mktx." />
    <example value="sx history [-j] ADDRESS1 [ADDRESS2...]" />
    <explanation value="The history tool uses a network connection to make requests against the" />
    <explanation value="load balancer backend." />
    <explanation value="" />
    <explanation value="  -j, --json                 Enable json parseable output." />
    <explanation value="" />
    <explanation value="Example:" />
    <explanation value="" />
    <explanation value="  $ echo 134HfD2fdeBTohfx8YANxEpsYXsv5UoWyz | sx history" />
    <explanation value="  Address: 134HfD2fdeBTohfx8YANxEpsYXsv5UoWyz" />
    <explanation value="    output: 97e06e49dfdd26c5a904670971ccf4c7fe7d9da53cb379bf9b442fc9427080b3:1" />
    <explanation value="    output_height: 247683" />
    <explanation value="    value:  100000" />
    <explanation value="    spend: b7354b8b9cc9a856aedaa349cffa289ae9917771f4e06b2386636b3c073df1b5:0" />
    <explanation value="    spend_height: 247742" />
  </command>

  <command symbol="bci-history" category="ONLINE (BLOCKCHAIN.INFO)" subcategory="BLOCKCHAIN QUERIES (blockchain.info)">
    <description value="Get list of output points, values, and their spends." />
    <description value="from blockchain.info" />
    <example value="sx bci-history SATOSHIS" />
    <explanation value="Get list of output points, values and spends using blockchain.info." />
  </command>

  <command symbol="get-utxo" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES">
    <description value="Get enough unspent transaction outputs from a given set of" />
    <description value="addresses to pay a given number of satoshis." />
    <example value="sx get-utxo ADDRESS1 ADDRESS2... SATOSHIS" />
    <explanation value="Get enough unspent transaction outputs from a given set of addresses to pay a given number of satoshis." />
  </command>

  <command symbol="get-pubkey" category="OFFLINE KEYS AND ADDRESSES" subcategory="BASIC">
    <description value="Get the pubkey of an address if available." />
    <example value="sx get-pubkey ADDRESS" />
    <explanation value="Get the pubkey of an address if available." />
  </command>

  <command symbol="mktx" category="OFFLINE TRANSACTIONS" subcategory="SCRIPTING">
    <description value="Create an unsigned tx." />
    <example value="sx mktx FILENAME [-i TXHASH:INDEX]... [-o ADDRESS:VALUE] [-o HEXSCRIPT:VALUE]" />
    <explanation value="Create an unsigned tx." />
    <explanation value="" />
    <explanation value="  -i, --input TXHASH:INDEX      Add input to transaction." />
    <explanation value="  -o, --output ADDRESS:VALUE or HEXSCRIPT:VALUE" />
    <explanation value="                                Add output to transaction." />
    <explanation value="" />
    <explanation value="Construct the transaction:" />
    <explanation value="" />
    <explanation value="  $ sx mktx txfile.tx -i 97e06e49dfdd26c5a904670971ccf4c7fe7d9da53cb379bf9b442fc9427080b3:1 -o 13Ft7SkreJY9D823NPm4t6D1cBqLYTJtAe:90000" />
    <explanation value="" />
    <explanation value="FILENAME denotes the output file. If FILENAME is - (a single dash), then" />
    <explanation value="output is written to stdout." />
    <explanation value="" />
    <explanation value="The VALUE field is in Satoshis." />
  </command>

  <command symbol="wif-to-secret" category="UTILITY" subcategory="FORMAT (WIF)">
    <description value="Convert a Wallet Import Format to secret exponent value." />
    <example value="echo WIF | sx wif-to-secret" />
    <explanation value="Convert a Wallet Import Format to secret exponent value." />
  </command>

  <command symbol="secret-to-wif" category="UTILITY" subcategory="FORMAT (WIF)">
    <description value="Convert a secret exponent value to Wallet Import Format." />
    <example value="echo SECRET | sx secret-to-wif" />
    <explanation value="Convert a secret exponent value to Wallet Import Format." />
  </command>

  <command symbol="sha256" category="UTILITY" subcategory="HASHES">
    <description value="Perform SHA256 hash of data." />
    <example value="sx sha256 DATA" />
    <explanation value="Perform SHA256 hash of data." />
  </command>

  <command symbol="mpk" category="DEPRECATED" subcategory="ELECTRUM STYLE DETERMINISTIC KEYS AND ADDRESSES">
    <description value="Extract a master public key from a deterministic wallet seed." />
    <example value="sx mpk" />
    <explanation value="Extract a master public key from a deterministic wallet seed." />
    <explanation value="" />
    <explanation value="  $ sx newseed > wallet.seed" />
    <explanation value="  $ cat wallet.seed" />
    <explanation value="  b220b5bd2909df1d74b71c9e664233bf" />
    <explanation value="  $ cat wallet.seed | sx mpk > master_public.key" />
  </command>

  <command symbol="newkey" category="OFFLINE KEYS AND ADDRESSES" subcategory="BASIC">
    <description value="Create a new private key." />
    <example value="sx newkey" />
    <explanation value="Create a new private key." />
    <explanation value="" />
    <explanation value="  $ sx newkey" />
    <explanation value="  5KPFsatiYrJcvCSRrDbtx61822vZjeGGGx3wu38pQDHRF8eVJ8H" />
  </command>

  <command symbol="newseed" category="DEPRECATED" subcategory="ELECTRUM STYLE DETERMINISTIC KEYS AND ADDRESSES">
    <description value="Create a new deterministic wallet seed." />
    <example value="sx newseed" />
    <explanation value="Create a new deterministic wallet seed." />
    <explanation value="" />
    <explanation value="  $ sx newseed" />
    <explanation value="  b220b5bd2909df1d74b71c9e664233bf" />
  </command>

  <command symbol="sendtx-node" category="ONLINE (BITCOIN P2P)" subcategory="BLOCKCHAIN UPDATES">
    <description value="Send transaction to a single node." />
    <example value="sx sendtx-node FILENAME [HOST] [PORT]" />
    <explanation value="Send transaction to a single node." />
    <explanation value="" />
    <explanation value="HOST and PORT default to localhost:8333." />
    <explanation value="" />
    <explanation value="Send transaction to one Bitcoin node on localhost port 4009:" />
    <explanation value="" />
    <explanation value="  $ sx sendtx-node txfile.tx localhost 4009" />
  </command>

  <command symbol="showblkhead" category="OFFLINE BLOCKCHAIN" subcategory="HEADERS">
    <description value="Show the details of a block header." />
    <example value="sx showblkhead FILENAME" />
    <explanation value="'showblkhead' allows inspecting of block headers." />
    <explanation value="" />
    <explanation value="  $ sx showblkhead headerfile.blk" />
    <explanation value="  hash: 4d25b18ed094ad68f75f21692d8540f45ceb90b240a521b8f191e95d8b6b8bb0" />
    <explanation value="  version: 1  locktime: 0" />
    <explanation value="  Input:" />
    <explanation value="    previous output:" />
    <explanation value="  97e06e49dfdd26c5a904670971ccf4c7fe7d9da53cb379bf9b442fc9427080b3:0" />
    <explanation value="    script:   sequence: 4294967295" />
    <explanation value="  Output:" />
    <explanation value="    value: 90000" />
    <explanation value="    script: dup hash160 [ 18c0bd8d1818f1bf99cb1df2269c645318ef7b73 ] equalverify" />
    <explanation value="  checksig" />
    <explanation value="    address: 13Ft7SkreJY9D823NPm4t6D1cBqLYTJtAe" />
  </command>

  <command symbol="showtx" category="OFFLINE TRANSACTIONS" subcategory="SCRIPTING">
    <description value="Show the details of a transaction." />
    <example value="sx showtx [-j] FILENAME" />
    <explanation value="'showtx' allows inspecting of tx files." />
    <explanation value="" />
    <explanation value="  -j, --json                 Enable json parseable output." />
    <explanation value="" />
    <explanation value="Example:" />
    <explanation value="" />
    <explanation value="  $ sx fetch-transaction cd484f683bc99c94948613a7f7254880e9c98cd74f2760a2d2c4e372fda1bc6a | sx showtx" />
    <explanation value="  hash: cd484f683bc99c94948613a7f7254880e9c98cd74f2760a2d2c4e372fda1bc6a" />
    <explanation value="  version: 1" />
    <explanation value="  locktime: 0" />
    <explanation value="  Input:" />
    <explanation value="    previous output: f97367c5dc9e521a4c541327cbff69d118e35a2d0b67f91eb7771741a6374b20:0" />
    <explanation value="    script: [ 3046022100f63b1109e1b04c0a4b5230e6f6c75f5e2a10c16d022cdf93de9b3cc946e6e24a022100ae3da40f05504521f2f3557e736a2d1724d6d1d8c18b66a64990bf1afee78dba01 ] [ 028a2adb719bbf7e9cf0cb868d4f30b10551f2a4402eb2ece9b177b49e68e90511 ]" />
    <explanation value="    sequence: 4294967295" />
    <explanation value="    address: 1NYMePixLjAATLaz55vN7FfTLUfFB23Tt" />
    <explanation value="  Output:" />
    <explanation value="    value: 2676400" />
    <explanation value="    script: dup hash160 [ 6ff00bd374abb3a3f19d1576bb36520b2cb15e2d ] equalverify checksig" />
    <explanation value="    address: 1BCsZziw8Q1sMhxr2DjAR7Rmt1qQvYwXSU" />
    <explanation value="  Output:" />
    <explanation value="    value: 1000000" />
    <explanation value="    script: hash160 [ 0db1635fe975792a9a7b6f2d4061b730478dc6b9 ] equal" />
    <explanation value="    address: 32wRDBezxnazSBxMrMqLWqD1ajwEqnDnMc" />
  </command>

  <command symbol="decode-addr" category="UTILITY" subcategory="FORMAT (BASE58CHECK)">
    <description value="Decode a address from base58check form to internal RIPEMD representation." />
    <example value="sx decode-addr ADDRESS" />
    <explanation value="Decode an address to its internal RIPEMD representation." />
  </command>

  <command symbol="embed-addr" category="OFFLINE KEYS AND ADDRESSES" subcategory="BASIC">
    <description value="Generate an address used for embedding record of data into the blockchain." />
    <example value="sx embed-addr" />
    <explanation value="Generate an address used for embedding record of data into the blockchain." />
    <explanation value="" />
    <explanation value="Example:" />
    <explanation value="" />
    <explanation value="  $ cat my_sculpture.jpg | sx embed-addr" />
    <explanation value="  1N9v8AKBqst9MNceV3gLmFKsgkKv1bZcBU" />
    <explanation value="" />
    <explanation value="Now send some Bitcoin to that address and it'll be embedded in the blockchain" />
    <explanation value="as a record of the data passed in." />
  </command>

  <command symbol="encode-addr" category="UTILITY" subcategory="FORMAT (BASE58CHECK)">
    <description value="Encode an address from internal RIPEMD representation to base58check form." />
    <example value="sx encode-addr HASH [VERSION]" />
    <explanation value="Encode an address to base58check form." />
  </command>

  <command symbol="validsig" category="OFFLINE TRANSACTIONS" subcategory="SCRIPTING">
    <description value="Validate a transaction input's signature." />
    <example value="sx validsig FILENAME INDEX SCRIPT_CODE SIGNATURE" />
    <explanation value="Validate a transaction input's signature." />
  </command>

  <command symbol="brainwallet" category="OFFLINE KEYS AND ADDRESSES" subcategory="BRAIN STORAGE">
    <description value="Make 256 bit bitcoin private key from an arbitrary passphrase." />
    <example value="sx brainwallet password" />
    <example value="sx brainwallet username password" />
    <example value="sx brainwallet password --algo slowsha" />
    <example value="sx brainwallet username password --algo slowsha" />
    <explanation value="Make 256 bit bitcoin private key from an arbitrary passphrase, using sha256." />
    <explanation value="Unsafe if passphrase is low in entropy." />
    <explanation value="See diceware and xkcd correct horse battery staple for advice on entropy and generating a safe brainwallet." />
  </command>

  <!--<command symbol="sign-transaction" category="OFFLINE (work in progress)" subcategory="SIGNING WALLET">
    <description value="Sign a transaction. Output is suitable for sending to bitcoin network." />
    <example value="cat unsigned.tx | sx sign-transaction --wallet=sx.wallet.gpg --gpgkey=~/. " />
    <example value="sx brainwallet username password" />
    <example value="sx brainwallet password --algo slowsha" />
    <example value="sx brainwallet username password --algo slowsha" />
    <explanation value="Make a private key from a brainwallet." />
  </command>-->

  <command symbol="set-input" category="OFFLINE TRANSACTIONS" subcategory="SCRIPTING">
    <description value="Set a transaction input." />
    <example value="sx set-input TXFILENAME INPUTINDEX SIGNATURE_AND_PUBKEY_SCRIPT" />
    <explanation value="Set a transaction input." />
    <explanation value="See sx help sign-input for an example." />
  </command>

  <command symbol="sign-input" category="OFFLINE TRANSACTIONS" subcategory="SCRIPTING">
    <description value="Sign a transaction input." />
    <example value="cat secret.key | sx sign-input FILENAME INDEX PREVOUT_SCRIPT" />
    <explanation value="Sign a transaction input." />
    <explanation value="" />
    <explanation value="" />
    <explanation value="Note how the input script in the following transaction is empty." />
    <explanation value="  $ sx mktx txfile.tx -i 97e06e49dfdd26c5a904670971ccf4c7fe7d9da53cb379bf9b442fc9427080b3:0 -o 13Ft7SkreJY9D823NPm4t6D1cBqLYTJtAe:90000" />
    <explanation value="  $ sx showtx txfile.tx" />
    <explanation value="  hash: 4d25b18ed094ad68f75f21692d8540f45ceb90b240a521b8f191e95d8b6b8bb0" />
    <explanation value="  version: 1  locktime: 0" />
    <explanation value="  Input:" />
    <explanation value="    previous output:" />
    <explanation value="  97e06e49dfdd26c5a904670971ccf4c7fe7d9da53cb379bf9b442fc9427080b3:0" />
    <explanation value="    script:   sequence: 4294967295" />
    <explanation value="  Output:" />
    <explanation value="    value: 90000" />
    <explanation value="    script: dup hash160 [ 18c0bd8d1818f1bf99cb1df2269c645318ef7b73 ] equalverify" />
    <explanation value="  checksig" />
    <explanation value="    address: 13Ft7SkreJY9D823NPm4t6D1cBqLYTJtAe" />
    <explanation value="" />
    <explanation value="We will now sign the first input using our private key." />
    <explanation value="" />
    <explanation value="  $ echo '5KPFsatiYrJcvCSRrDbtx61822vZjeGGGx3wu38pQDHRF8eVJ8H' > private.key" />
    <explanation value="  $ DECODED_ADDR=$(cat private.key | sx addr | sx decode-addr)" />
    <explanation value="  $ PREVOUT_SCRIPT=$(sx rawscript dup hash160 [ $DECODED_ADDR ] equalverify checksig)" />
    <explanation value="  $ SIGNATURE=$(cat private.key | sx sign-input txfile.tx 0 $PREVOUT_SCRIPT)" />
    <explanation value="  $ SIGNATURE_AND_PUBKEY_SCRIPT=$(sx rawscript [ $SIGNATURE ] [ $(cat private.key | sx pubkey) ])" />
    <explanation value="  $ sx set-input txfile.tx 0 $SIGNATURE_AND_PUBKEY_SCRIPT > txfile.tx.signed  # the first input has index 0" />
    <explanation value="" />
    <explanation value="Note how the input script in the following transaction is now filled." />
    <explanation value="" />
    <explanation value="  $ cat txfile.tx.signed | sx showtx" />
    <explanation value="  hash: cc5650c69173e7607c095200f4ff36265f9fbb45e112b60cd467d696b2724488" />
    <explanation value="  version: 1" />
    <explanation value="  locktime: 0" />
    <explanation value="  Input:" />
    <explanation value="    previous output: 97e06e49dfdd26c5a904670971ccf4c7fe7d9da53cb379bf9b442fc9427080b3:0" />
    <explanation value="    script: [ 3045022100b778f7fb270b751491ba7e935a6978eaea2a44795b3f6636ea583939697b1ca102203ce47d3ecb0b7e832114e88e549fce476d4ea120ca1e60c508fe8083889a9cba01 ] [ 04c40cbd64c9c608df2c9730f49b0888c4db1c436e8b2b74aead6c6afbd10428c0adb73f303ae1682415253f4411777224ab477ad098347ddb7e0b94d49261e613 ]" />
    <explanation value="    sequence: 4294967295" />
    <explanation value="    address: 1MyKMeDsom7rYcp69KpbKn4DcyuvLMkLYJ" />
    <explanation value="  Output:" />
    <explanation value="    value: 90000" />
    <explanation value="    script: dup hash160 [ 18c0bd8d1818f1bf99cb1df2269c645318ef7b73 ] equalverify checksig" />
    <explanation value="    address: 13Ft7SkreJY9D823NPm4t6D1cBqLYTJtAe" />
    <explanation value="" />
    <explanation value="" />
    <explanation value="Now the input script is prepared, and the transaction is signed." />
  </command>

  <command symbol="mnemonic" category="OFFLINE KEYS AND ADDRESSES" subcategory="BRAIN STORAGE">
    <description value="Make 12 word mnemonic out of 128 bit electrum or bip32 seed." />
    <example value="sx mnemonic" />
    <example value="sx mnemonic SEED" />
    <example value="sx mnemonic WORD1 WORD2 WORD3 ... WORD12" />
    <example value="sx mnemonic <<< SEED" />
    <example value="sx mnemonic <<< 'WORD1 WORD2 WORD3 ... WORD12'" />
    <explanation value="Electrum compatible 12 word seeds." />
    <explanation value="" />
    <explanation value="  $ echo 148f0a1d77e20dbaee3ff920ca40240d | sx mnemonic" />
    <explanation value="  people blonde admit dart couple different truth common alas stumble time cookie" />
    <explanation value="  $ echo 'people blonde admit dart couple different truth common alas stumble time cookie' | sx mnemonic" />
    <explanation value="  148f0a1d77e20dbaee3ff920ca40240d" />
  </command>

  <command symbol="watchtx" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN WATCHING">
    <description value="Watch transactions from the network searching for a certain hash." />
    <example value="sx watchtx [TXHASH]..." />
    <explanation value="Watch transactions from the network searching for a certain hash." />
  </command>

  <command symbol="stealth-initiate" category="OFFLINE KEYS AND ADDRESSES" subcategory="STEALTH">
    <description value="Initiate a new stealth payment." />
    <example value="sx stealth-initiate EPHEM_SECRET SCAN_PUBKEY SPEND_PUBKEY" />
    <explanation value="Initiate a new stealth payment." />
  </command>

  <command symbol="stealth-uncover" category="OFFLINE KEYS AND ADDRESSES" subcategory="STEALTH">
    <description value="Uncover a stealth address." />
    <example value="sx stealth-uncover EPHEM_PUBKEY SCAN_SECRET SPEND_PUBKEY" />
    <explanation value="Uncover a stealth address." />
  </command>

  <command symbol="stealth-uncover-secret" category="OFFLINE KEYS AND ADDRESSES" subcategory="STEALTH">
    <description value="Uncover a stealth secret." />
    <example value="sx stealth-uncover-secret EPHEM_PUBKEY SCAN_SECRET SPEND_SECRET" />
    <explanation value="Uncover a stealth secret." />
  </command>

  <command symbol="stealth-newkey" category="OFFLINE KEYS AND ADDRESSES" subcategory="STEALTH">
    <description value="Generate new stealth keys and an address." />
    <example value="sx stealth-newkey" />
    <explanation value="Generate new stealth keys and an address." />
  </command>

  <command symbol="stealth-addr" category="OFFLINE KEYS AND ADDRESSES" subcategory="STEALTH">
    <description value="See a stealth address from given input." />
    <example value="sx stealth-addr [--reuse-key|-r] [--signatures|-s NSIGS] SCAN_PUBKEY SPEND_PUBKEY1 ...  SPEND_PUBKEYN" />
    <explanation value="See a stealth address from given input." />
    <explanation value="" />
    <explanation value="  --reuse-key -r    Reuse SCAN_PUBKEY for SPEND_PUBKEY" />
    <explanation value="  --signatures -s   Specify NUMBER_SIGNATURES needed." />
  </command>

  <command symbol="stealth-show-addr" category="OFFLINE KEYS AND ADDRESSES" subcategory="STEALTH">
    <description value="Show details for a stealth address." />
    <example value="sx stealth-show-addr STEALTH_ADDRESS" />
    <explanation value="Show details for a stealth address." />
  </command>

  <command symbol="hd-seed" category="OFFLINE KEYS AND ADDRESSES" subcategory="HD / BIP32">
    <description value="Create a random new HD key." />
    <example value="sx hd-seed [ENTROPY]" />
    <explanation value="Create a random new HD key." />
  </command>

  <command symbol="hd-priv" category="OFFLINE KEYS AND ADDRESSES" subcategory="HD / BIP32">
    <description value="Create a private HD key from another HD private key." />
    <example value="sx hd-priv [--hard] INDEX" />
    <explanation value="Create a private HD key from another HD private key." />
  </command>

  <command symbol="hd-pub" category="OFFLINE KEYS AND ADDRESSES" subcategory="HD / BIP32">
    <description value="Create an HD public key from another HD private or public key." />
    <example value="sx hd-pub [--hard] INDEX" />
    <explanation value="Create an HD public key from another HD private or public key." />
    <explanation value="" />
    <explanation value="If no arguments are passed then hd-pub expects a private key in" />
    <explanation value="STDIN and will convert it to a public key." />
  </command>

  <command symbol="hd-to-address" category="OFFLINE KEYS AND ADDRESSES" subcategory="HD / BIP32">
    <description value="Convert an HD public or private key to a Bitcoin address." />
    <example value="sx hd-to-address" />
    <explanation value="Convert an HD public or private key to a Bitcoin address." />
  </command>

  <command symbol="hd-to-wif" category="OFFLINE KEYS AND ADDRESSES" subcategory="HD / BIP32">
    <description value="Convert an HD private key to a WIF private key." />
    <example value="sx hd-to-wif" />
    <explanation value="Convert an HD private key to a WIF private key." />
  </command>
  
  <command symbol="ec_add" category="UTILITY" subcategory="EC MATH">
    <description value="Calculate the result of POINT + POINT." />
    <example value="sx ec-add POINT POINT" />
    <explanation value="Calculate the result of POINT + POINT." />
  </command>

  <command symbol="ec-add-modp" category="UTILITY" subcategory="EC MATH">
    <description value="Calculate the result of INTEGER + INTEGER." />
    <example value="sx ec-add-modp INTEGER INTEGER" />
    <explanation value="Calculate the result of INTEGER + INTEGER." />
  </command>

  <command symbol="ec-tweak-add" category="UTILITY" subcategory="EC MATH">
    <description value="Calculate the result of POINT + INTEGER * G." />
    <example value="sx ec-tweak-add INTEGER POINT" />
    <example value="sx ec-tweak-add POINT INTEGER" />
    <explanation value="Calculate the result of POINT + INTEGER * G." />
  </command>

  <command symbol="ec-multiply" category="UTILITY" subcategory="EC MATH">
    <description value="Multiply an integer and a point together." />
    <example value="sx ec-multiply INTEGER POINT" />
    <example value="sx ec-multiply POINT INTEGER" />
    <explanation value="Multiply an integer and a point together." />
  </command>
  
</generate>
























