<?xml version = "1.0" ?>
<generate script="generate.gsl" language="en-us">

  <!-- Resource strings for use by GSL template -->
  
  <resource>
    <string name="sx_config_description" value="The path and file name for the configuration settings file for this application." />
  </resource>
  
  <!-- Configuration file sections -->
  
  <configuration section="general">
    <!-- NOTE: we could move this into the obelisk section if it was dynamic. -->
    <!-- NOTE: we probably shouldn't use this setting since the fact is compiled into dependencies. -->
    <setting name="testnet" type="bool" description="Set to true in order to operate this application using Bitcoin testnet (vs. mainnet) addressing and blockchain data. This option is EXPERIMENTAL because other  libraries on which this application depends must currently be compiled with the testnet flag to ensure complete testnet semantics." />
  </configuration>
  
  <configuration section="obelisk">
    <!-- TODO: create serialized type for URI -->
    <setting name="client-certificate" type="path" description="The path to a private key certificate (file) that the server can use to prove the identity of this client. This is useful in authorizing remote administration of the server. The associated public key would need to be known by the server. Use the CZMQ program 'makecert' to generate the key certificate. For example: /home/genjix/.sx.cert" />
    <setting name="server-public-key" description="The public key of the server to which this application may connect. This must be the key for server specified by the 'service' option. For example: W=GRFxHUuUN#En3MI]f{}X:KWnV=pRZ$((byg=:h" />
    <setting name="service" default="tcp://obelisk.unsystem.net:8081" description="The URI of the server to which this application may connect." />
  </configuration>

  <!-- SX Commands -->

  <command symbol="addr-decode" formerly="decode-addr" category="WALLET">
    <option name="help" description="Convert a Bitcoin address to RIPEMD160." />
    <argument name="ADDRESS" stream="true" type="address" description="The Bitcoin address to convert."/>
  </command>
  
  <command symbol="addr-embed" formerly="embed-addr" category="WALLET" stub="true">
    <option name="help" description="Generate a Bitcoin address with an embedded record of binary data." />
    <argument name="FILE" stream="true" description="The binary data of which to embed a record."/>
    <define name="SX_ADDR_EMBED_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>

  <command symbol="addr-encode" formerly="encode-addr" category="WALLET">
    <option name="help" description="Convert a RIPEMD160 value to a Bitcoin address." />
    <option name="version" type="byte" description="The desired Bitcoin address version." />
    <argument name="RIPEMD160" stream="true" type="bitcoin160" description="The hex encoded hash to convert."/>
  </command>

  <command symbol="addr-validate" formerly="validaddr" category="WALLET">
    <option name="help" description="Validate a set of addresses. The result is successful if all addresses are valid." />
    <argument name="ADDRESS" type="address" limit="-1" description="The set of Bitcoin addresses to validate." />
  </command>
  
  <command symbol="balance" category="ONLINE" obelisk="true">
    <option name="help" description="Get the balance in satoshi of one or more Bitcoin addresses. Requires a server connection." />
    <option name="json" description="Enable JSON output." />
    <argument name="ADDRESS" limit="-1" type="address" description="The set of Bitcoin addresses." />
    <define name="SX_BALANCE_INVALID_ADDRESS" value="Invalid address '%1%'." />
    <define name="SX_BALANCE_OUTPUT" value="Address: %1%\n  Paid balance:    %2%\n  Pending balance: %3%\n  Total received:  %4%\n" />
  </command>

  <command symbol="base58check-decode" category="HASH" stub="true">
    <option name="help" description="Convert a Base58Check value to hex encoded data." />
    <argument name="BASE58CHECK" stream="true" type="base58" description="The Base58Check encoded value to decode." />
    <define name="SX_BASE58CHECK_DECODE_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>

  <command symbol="base58check-encode" category="HASH" stub="true">
    <option name="help" description="Convert hex encoded data to Base58Check." />
    <argument name="HEX" stream="true" type="bytes" description="The hex encoded value to Base58Check encode." />
    <define name="SX_BASE58CHECK_ENCODE_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>
  
  <command symbol="base58-decode" category="HASH">
    <option name="help" description="Convert a Base58 value to a hex encoded data." />
    <argument name="BASE58" stream="true" type="base58" description="The Base58 encoded value to decode." />
  </command>

  <command symbol="base58-encode" category="HASH">
    <option name="help" description="Convert a hex encoded data to Base58." />
    <argument name="HEX" stream="true" type="bytes" description="The hex encoded data to Base58 encode." />
  </command>
  
  <command symbol="bci-fetch-last-height" category="ONLINE" stub="true">
    <option name="help" description="Get the last block height from blockchain.info." />
    <define name="SX_BCI_FETCH_LAST_HEIGHT_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>

  <command symbol="bci-history" category="ONLINE" stub="true">
    <option name="help" description="Get the list of outputs, values and spends for an address from blockchain.info." />
    <argument name="ADDRESS" stream="true" type="address" description="The Bitcoin address to query." />
    <define name="SX_BCI_HISTORY_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>
  
  <command symbol="bci-send-transaction" formerly="sendtx-bci" category="BONLINE" stub="true">
    <option name="help" description="Send a Bitcoin transaction to blockchain.info." />
    <option name="FILE" description="The transaction file path and file name. If not specified the transaction is read from STDIN."/>
    <define name="SX_BCI_SEND_TRANSACTION_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>

  <command symbol="be-fetch-transaction" formerly="blke-fetch-transaction" category="ONLINE" stub="true">
    <option name="help" description="Get a Bitcoin transaction from blockexplorer.com." />
    <argument name="HASH" stream="true" type="bitcoin256" description="The hex encoded transaction hash." />
    <define name="SX_BE_FETCH_TRANSACTION_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>

  <command symbol="bitcoin160" category="HASH">
    <option name="help" description="Perform a RIPEMD160 hash of a SHA256 hash of hex encoded data." />
    <argument name="HEX" stream="true" type="bytes" description="The hex encoded data to hash."/>
  </command>

  <command symbol="bitcoin256" category="HASH">
    <option name="help" description="Perform a SHA256 hash of a SHA256 hash of hex encoded data." />
    <argument name="HEX" stream="true" type="bytes" description="The hex encoded data to hash."/>
  </command>

  <command symbol="brainwallet" category="WALLET" stub="true">
    <option name="help" description="Make an EC private key from an arbitrary passphrase. Unsafe if passphrase is low in entropy. See diceware and xkcd for advice on entropy and generating a safe brainwallet." />
    <option name="algorithm" description="The algorithm (e.g. slowsha)." />
    <argument name="PASSWORD" required="true" description="The passphrase." />
    <argument name="USERNAME" description="A username." />
    <define name="SX_BRAINWALLET_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>
  
  <command symbol="btc" category="MATH" stub="true">
    <option name="help" description="Convert satoshi to BTC." />
    <argument name="SATOSHI" stream="true" type="uint64_t" description="The number of satoshi to convert."/>
    <define name="SX_BTC_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>
   
  <command symbol="ec-add" formerly="ec-tweak-add" category="MATH">
    <option name="help" description="Calculate the EC function POINT + (SECRET * curve-generator-point)." />
    <argument name="POINT" required="true" type="ec_public" description="The hex encoded EC point to add."/>
    <argument name="SECRET" required="true" type="ec_private" description="The hex encoded EC secret to add."/>
    <define name="SX_EC_ADD_OUT_OF_RANGE" value="Function exceeds valid range." />
  </command>

  <command symbol="ec-add-secrets" formerly="ec-add-modp" category="MATH">
    <option name="help" description="Calculate the EC function (SECRET + SECRET) % curve-order." />
    <argument name="SECRET" limit="-1" required="true" type="ec_private" description="The hex encoded secret to add."/>
    <define name="SX_EC_ADD_SECRETS_OUT_OF_RANGE" value="Sum exceeds valid range." />
  </command>

  <command symbol="ec-multiply" category="MATH">
    <option name="help" description="Calculate the EC product (POINT * SECRET)." />
    <argument name="POINT" required="true" type="ec_public" description="The hex encoded EC point to multiply."/>
    <argument name="SECRET" required="true" type="ec_private" description="The hex encoded EC secret to multiply."/>
    <define name="SX_EC_MULITPLY_OUT_OF_RANGE" value="Product exceeds valid range." />
  </command>
  
  <command symbol="ec-multiply-secrets" formerly="ec-add" category="MATH">
    <option name="help" description="Calculate the EC function (SECRET * SECRET) % curve-order." />
    <argument name="SECRET" limit="-1" required="true" type="ec_private" description="The hex encoded EC secret to multiply."/>
    <define name="SX_EC_MULITPLY_SECRETS_OUT_OF_RANGE" value="Function exceeds valid range." />
  </command>

  <command symbol="ec-new" formerly="newkey" category="WALLET">
    <option name="help" description="Create a new EC private key from entropy." />
    <argument name="SEED" stream="true" type="bytes" description="The hex encoded seed for the new key. If empty defaults to a random 32 byte value." />
  </command>
  
  <command symbol="ec-to-addr" formerly="addr" category="WALLET">
    <option name="help" description="Convert an EC public key to a Bitcoin address." />
    <option name="version" type="byte" description="The desired Bitcoin address version." />
    <argument name="POINT" stream="true" type="ec_public" description="The hex encoded EC public key to convert." />
  </command>

  <command symbol="ec-to-pub" formerly="pubkey" category="WALLET">
    <option name="help" description="Derive the EC public key of an EC private key. Defaults to the compressed public key format." />
    <option name="uncompressed" description="Derive using the uncompressed public key format." />
    <argument name="SECRET" stream="true" type="ec_private" description="The hex encoded EC private key."/>
  </command>
  
  <command symbol="ec-to-wif" category="WALLET">
    <option name="help" description="Convert an EC private key to a WIF private key. The result associates with the compressed public key format by default." />
    <option name="uncompressed" description="Associate the result with the uncompressed public key format." />
    <argument name="SECRET" stream="true" type="ec_private" description="The hex encoded EC private key to convert."/>
  </command>
  
  <command symbol="fetch-header" category="ONLINE" obelisk="true">
    <option name="help" description="Get the raw block header from the specified hash or height. Requires a server connection." />
    <option name="hash" shortcut="s" type="bitcoin256" description="The hex encoded block hash."/>
    <option name="height" shortcut="t" type="size_t" description="The block height."/>
  </command>

  <command symbol="fetch-last-height" category="ONLINE" obelisk="true">
    <option name="help" description="Get the last block height. Requires a server connection." />
  </command>

  <command symbol="fetch-public-key" formerly="get-pubkey" category="ONLINE" stub="true" obelisk="true">
    <option name="help" description="Get the EC public key of the address, if it exists on the blockchain. Requires a server connection." />
    <argument name="ADDRESS" stream="true" type="address" description="The Bitcoin address of the public key."/>
    <define name="SX_FETCH_PUBLIC_KEY_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>
  
  <command symbol="fetch-stealth" category="ONLINE" obelisk="true">
    <option name="help" description="Get the stealth transactions matching the specified filter. Requires a server connection." />
    <!--<argument name="PREFIX" stream="true" type="uint32_t" description="The prefix of transactions to get."/>-->
    <option name="from_height" type="size_t" description="The minimum block height of transactions to include in the search. Searches all blocks if not set."/>
    <option name="number_bits" type="uint32_t" description="The number of bits of the bitfield to include in the search. Defaults to zero."/>
    <option name="bitfield" type="uint32_t" description="The stealth prefix bitfield. Number bits must be greater than zero for this to be used."/>
    <define name="SX_FETCH_STEALTH_OUTPUT" value="Ephemeral key: %1% Address: %2% Transaction hash: %3%\n" />
  </command>

  <command symbol="fetch-transaction" category="ONLINE" obelisk="true">
    <option name="help" description="Get a transaction. Requires a server connection." />
    <argument name="HASH" stream="true" type="bitcoin256" description="The hex encoded transaction hash." />
  </command>

  <command symbol="fetch-transaction-index" category="ONLINE" obelisk="true">
    <option name="help" description="Get the block height and index of a transaction. Requires a server connection." />
    <argument name="HASH" stream="true" type="bitcoin256" description="The hex encoded transaction hash." />
    <define name="SX_FETCH_TRANSACTION_INDEX_OUTPUT" value="Height: %1% Index: %2%\n" />
  </command>

  <command symbol="fetch-utxo" formerly="get-utxo" category="ONLINE" stub="true" obelisk="true">
    <option name="help" description="Get enough unspent transaction outputs from a set of Bitcoin addresses to pay a number of satoshi. Requires a server connection." />
    <argument name="SATOSHI" type="uint64_t" required="true" description="The whole number of satoshi." />
    <argument name="ADDRESS" limit="-1" type="address" description="The set of Bitcoin addresses." />
    <define name="SX_FETCH_UTXO_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>

  <command symbol="genaddr" category="ELECTRUM" obsolete="true">
    <option name="help" description="Generate a Bitcoin address deterministically from an Electrum wallet." />
    <define name="SX_GENADDR_OBSOLETE" value="Electrum style key functions are obsolete. Use HD (BIP32) commands instead." />
  </command>
  
  <command symbol="genpriv" category="ELECTRUM" obsolete="true">
    <option name="help" description="Generate a private key deterministically from an Electrum seed." />
    <define name="SX_GENPRIV_OBSOLETE" value="Electrum style key functions are obsolete. Use HD (BIP32) commands instead." />
  </command>

  <command symbol="genpub" category="ELECTRUM" obsolete="true">
    <option name="help" description="Generate a public key deterministically from an Electrum wallet." />
    <define name="SX_GENPUB_OBSOLETE" value="Electrum style key functions are obsolete. Use HD (BIP32) commands instead." />
  </command>

  <command symbol="hd-new" formerly="hd-seed" category="WALLET">
    <option name="help" description="Create a new HD private key from entropy." />
    <argument name="SEED" stream="true" type="bytes" description="The hex encoded seed for the new key. If empty defaults to a random 32 byte value." />
  </command>

  <command symbol="hd-priv" category="WALLET">
    <option name="help" description="Derive a child HD private key from another HD private key." />
    <option name="hard" shortcut="d" description="Signal to create a hardened key." />
    <option name="index" type="uint32_t" description="The HD index, defaults to zero." />
    <argument name="SECRET" stream="true" type="hd_private" description="The parent HD private key." />
  </command>

  <command symbol="hd-pub" category="WALLET">
    <option name="help" description="Derive a child HD public key from another HD public or private key." />
    <option name="hard" shortcut="d" description="Signal to create a hardened key." />
    <option name="index" type="uint32_t" description="The HD index, defaults to zero." />
    <argument name="KEY" stream="true" type="hd_key" description="The parent HD public or private key." />
    <define name="SX_HD_PUB_HARD_OPTION_CONFLICT" value="The hard option requires a private key." />
  </command>

  <command symbol="hd-to-addr" formerly="hd-to-address" category="WALLET">
    <option name="help" description="Convert a HD public or private key to a Bitcoin address." />
    <argument name="KEY" stream="true" type="hd_key" description="The HD public or private key to convert." />
  </command>

  <command symbol="hd-to-ec" category="WALLET">
    <option name="help" description="Convert a HD public or private key to the equivalent EC public or private key." />
    <argument name="KEY" stream="true" type="hd_key" description="The HD public or private key to convert." />
  </command>
  
  <command symbol="hd-to-pub" category="WALLET">
    <option name="help" description="Derive the HD public key of a HD private key." />
    <argument name="SECRET" stream="true" type="hd_private" description="The HD private key." />
  </command>

  <command symbol="hd-to-wif" category="WALLET">
    <option name="help" description="Convert a HD private key to a WIF private key." />
    <argument name="SECRET" stream="true" type="hd_private" description="The HD private key to convert." />
  </command>
  
  <command symbol="history" category="ONLINE" obelisk="true">
    <option name="help" description="Get list of output points, values, and spends for one or more Bitcoin addresses. Requires a server connection." />
    <option name="json" description="Enable JSON output." />
    <argument name="ADDRESS" limit="-1" type="address" description="The set of Bitcoin addresses." />
    <define name="SX_HISTORY_INVALID_ADDRESS" value="Invalid address '%1%'." />
    <define name="SX_HISTORY_PENDING" value="Pending" />
    <define name="SX_HISTORY_UNSPENT" value="Unspent" />
    <define name="SX_HISTORY_OUTPUT" value="Address: %1%\n  Output: %2%\n  Output height: %3%\n  Value: %4%\n  spend: %5%\n  Spend height: %6%\n" />
  </command>

  <command symbol="help" category="SX">
    <option name="help" description="Get help for any command." />
    <argument name="COMMAND" stream="true" description="The command for which help is requested." />
    <define name="SX_HELP_NOT_COMMAND" value="The word '%1%' is not a sx command. All commands:" />
  </command>

  <command symbol="initchain" category="ONLINE" obsolete="true">
    <option name="help" description="Initialize a new blockchain database." />
    <define name="SX_INITCHAIN_OBSOLETE" value="Server administration tools are no longer supported." />
  </command>

  <command symbol="monitor" category="ONLINE" obelisk="true">
    <option name="help" description="Monitor an address prefix. WARNING: THIS COMMAND IS EXPERIMENTAL" />
    <!--<argument name="PREFIX" stream="true" type="uint32_t" description="The prefix of transactions to monitor."/>-->
    <option name="bitfield" type="uint32_t" description="The stealth prefix bitfield. Number bits must be greater than zero for this to be used."/>
    <option name="number_bits" type="uint32_t" description="The number of bits of the bitfield to include in the search. Defaults to zero."/>
  </command>
  
  <command symbol="mpk" category="ELECTRUM" obsolete="true">
    <option name="help" description="Extract a master public key from a deterministic wallet seed." />
    <define name="SX_MPK_OBSOLETE" value="Electrum style key functions are obsolete. Use HD (BIP32) commands instead." />
  </command>

  <command symbol="newseed" category="ELECTRUM" obsolete="true">
    <option name="help" description="Create a new Electrum style deterministic wallet seed." />
    <define name="SX_NEWSEED_OBSOLETE" value="Electrum style key functions are obsolete. Use HD (BIP32) commands instead." />
  </command>
  
  <!-- TODO: parameterize for stealth address. -->
  <command symbol="qrcode" category="WALLET" stub="true">
    <option name="help" description="Generate a QR code image file for a Bitcoin address." />
    <option name="FILE" type="path" description="The image file path and file name. If not specified the image is written to STDOUT."/>
    <argument name="ADDRESS" stream="true" type="address" description="The address."/>
    <define name="SX_QRCODE_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>

  <command symbol="ripemd160" formerly="ripemd-hash" category="HASH">
    <option name="help" description="Perform a RIPEMD160 hash of hex encoded data." />
    <argument name="HEX" stream="true" type="bytes" description="The hex encoded data to hash."/>
  </command>

  <command symbol="satoshi" category="MATH" stub="true">
    <option name="help" description="Convert BTC to satoshi." />
    <argument name="BTC" stream="true" description="The whole number of BTC to convert."/>
    <define name="SX_SATOSHI_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>

  <command symbol="sha160" category="HASH">
    <option name="help" description="Perform a SHA160 (also known as SHA-1) hash of hex encoded data." />
    <argument name="HEX" stream="true" type="bytes" description="The hex encoded data to hash."/>
  </command>

  <command symbol="sha256" category="HASH">
    <option name="help" description="Perform a SHA256 hash of hex encoded data." />
    <argument name="HEX" stream="true" type="bytes" description="The hex encoded data to hash."/>
  </command>

  <command symbol="sha512" category="HASH">
    <option name="help" description="Perform a SHA512 hash of hex encoded data." />
    <argument name="HEX" stream="true" type="bytes" description="The hex encoded data to hash."/>
  </command>
  
  <command symbol="stealth-addr" category="STEALTH">
    <option name="help" description="Generate a stealth address." />
    <option name="reuse-key" description="Reuse the SCAN_PUBKEY as a SPEND_PUBKEY." />
    <option name="signatures" type="byte" description="Specify the number of signatures needed. Defaults to the number of SPEND_PUBKEYs provided." />
    <argument name="SCAN_KEY" type="ec_public" required="true" description="The hex encoded EC public key of the recipient." />
    <argument name="SPEND_KEY" type="ec_public" limit="-1" description="The hex encoded EC public key(s) that is/are spent to." />
  </command>

  <command symbol="unwrap" category="HASH">
    <option name="help" description="Validate the checksum of a hex encoded data and recover its version byte and data." />
    <argument name="HEX" stream="true" type="bytes" description="The hex encoded data to unwrap." />
    <define name="SX_UNWRAP_INVALID_CHECKSUM" value="The HEX argument checksum is not valid." />
  </command>

  <command symbol="wallet" category="WALLET" obsolete="true">
    <option name="help" description="Experimental command line wallet." />
    <define name="SX_WALLET_OBSOLETE" value="This experimental command is no longer supported." />
  </command>

  <command symbol="watchtx" category="ONLINE" stub="true" obelisk="true">
    <option name="help" description="Watch the network for one or more transactions by hash." />
    <argument name="HASH" limit="-1" type="bitcoin256" description="The set of hex encoded transaction hashes." />
    <define name="SX_WATCHTX_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>
  
  <command symbol="wif-to-ec" category="WALLET">
    <option name="help" description="Convert a WIF private key to an EC private key." />
    <argument name="WIF" stream="true" type="wif" description="The value to convert."/>
  </command>
  
  <command symbol="wif-to-pub" category="WALLET">
    <option name="help" description="Derive the EC public key from a WIF private key." />
    <argument name="WIF" stream="true" type="wif" description="The WIF private key."/>
  </command>

  <command symbol="wrap" category="HASH">
    <option name="help" description="Add a version byte and checksum to hex encoded data." />
    <option name="version" type="byte" required="true" description="The desired version number." />
    <argument name="HEX" stream="true" type="bytes" description="The hex encoded data to wrap." />
  </command>
  
</generate>