<?xml version = "1.0" ?>
<generate script="generate.gsl" language="en-us">

  <!-- Resource strings for use by GSL template -->
  
  <resource>
    <string name="sx_config_description" value="The path and file name for the configuration settings file for this application." />
  </resource>
  
  <!-- Configuration file sections -->
  
  <configuration section="general">
    <!-- NOTE: we could move this into the obelisk section if it was dynamic. -->
    <!-- NOTE: we probably shouldn't use this setting since the fact is compiled into dependencies. -->
    <setting name="testnet" type="bool" description="Set to true in order to operate this application using Bitcoin testnet (vs. mainnet) addressing and blockchain data. This option is EXPERIMENTAL because other  libraries on which this application depends must currently be compiled with the testnet flag to ensure complete testnet semantics." />
  </configuration>
  
  <configuration section="obelisk">
    <!-- TODO: create serialized type for URI -->
    <setting name="client-certificate" type="path" description="The path to a private key certificate (file) that the server can use to prove the identity of this client. This is useful in authorizing remote administration of the server. The associated public key would need to be known by the server. Use the CZMQ program 'makecert' to generate the key certificate. For example: /home/genjix/.sx.cert" />
    <setting name="server-public-key" description="The public key of the server to which this application may connect. This must be the key for server specified by the 'service' option. For example: W=GRFxHUuUN#En3MI]f{}X:KWnV=pRZ$((byg=:h" />
    <setting name="service" default="tcp://obelisk.unsystem.net:8081" description="The URI of the server to which this application may connect." />
  </configuration>

  <!-- SX Commands -->
  
  <!-- how does ec_key differ from hd_key? -->
  <command symbol="addr" category="OFFLINE KEYS AND ADDRESSES" subcategory="BASIC">
    <option name="help" description="Convert a public key (hex bytes) or private key (hash or WIF) to a Bitcoin address." />
    <option name="version" type="byte" description="The desired address version." />
    <argument name="KEY" stream="true" type="ec_key" description="The public key or hex or WIF encoded private key to convert." />
  </command>

  <command symbol="addr-decode" category="UTILITY" subcategory="FORMAT (BASE58CHECK)">
    <option name="help" description="Convert an address from Base58Check to RIPEMD160." />
    <argument name="ADDRESS" stream="true" type="address" description="The address to convert."/>
  </command>

  <command symbol="addr-encode" category="UTILITY" subcategory="FORMAT (BASE58CHECK)">
    <option name="help" description="Convert an address from RIPEMD160 to Base58Check." />
    <option name="version" type="byte" description="The desired version number." />
    <argument name="RIPEMD160" stream="true" type="bitcoin160" description="The hex string to convert."/>
  </command>
  
  <!-- sx balance 134HfD2fdeBTohfx8YANxEpsYXsv5UoWyz" -->
  <command symbol="balance" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES" obelisk="true">
    <option name="help" description="Get the balance in satoshi of one or more Bitcoin addresses. Requires a server connection." />
    <option name="json" description="Enable JSON output." />
    <argument name="ADDRESS" limit="-1" type="address" description="The set of addresses." />
    <define name="SX_BALANCE_INVALID_ADDRESS" value="Invalid address '%1%'." />
    <define name="SX_BALANCE_OUTPUT" value="Address: %1%\n  Paid balance:    %2%\n  Pending balance: %3%\n  Total received:  %4%\n" />
  </command>

  <command symbol="base58check-decode" category="UTILITY" subcategory="FORMAT (BASE 58 CHECK)" stub="true">
    <option name="help" description="Convert a Base58Check value to a hex string." />
    <argument name="BASE58CHECK" stream="true" description="The Base58Check encoded value to decode." />
    <define name="SX_BASE58CHECK_DECODE_NOT_IMPLEMENTED" value="This command is not yet ported from python." />
  </command>

  <command symbol="base58check-encode" category="UTILITY" subcategory="FORMAT (BASE 58 CHECK)" stub="true">
    <option name="help" description="Convert a hex string to Base58Check." />
    <argument name="HEX" stream="true" type="bytes" description="The hex string to Base58Check encode." />
    <define name="SX_BASE58CHECK_ENCODE_NOT_IMPLEMENTED" value="This command is not yet ported from python." />
  </command>
  
  <command symbol="base58-decode" category="UTILITY" subcategory="FORMAT (BASE 58)">
    <option name="help" description="Convert a Base58 value to a hex string." />
    <argument name="BASE58" stream="true" type="base58" description="The Base58 encoded value to decode." />
  </command>

  <command symbol="base58-encode" category="UTILITY" subcategory="FORMAT (BASE 58)">
    <option name="help" description="Convert a hex string to Base58." />
    <argument name="HEX" stream="true" type="bytes" description="The hex string to Base58 encode." />
  </command>
  
  <command symbol="bci-fetch-last-height" category="ONLINE (BLOCKCHAIN.INFO)" subcategory="BLOCKCHAIN QUERIES (blockchain.info)" stub="true">
    <option name="help" description="Get the last block height from blockchain.info." />
    <define name="SX_BCI_FETCH_LAST_HEIGHT_NOT_IMPLEMENTED" value="This command is not yet ported from python." />
  </command>

  <command symbol="bci-history" category="ONLINE (BLOCKCHAIN.INFO)" subcategory="BLOCKCHAIN QUERIES (blockchain.info)" stub="true">
    <option name="help" description="Get the list of outputs, values and spends for an address from blockchain.info." />
    <argument name="ADDRESS" stream="true" type="address" description="The address to query." />
    <define name="SX_BCI_HISTORY_NOT_IMPLEMENTED" value="This command is not yet ported from python." />
  </command>

  <command symbol="blke-fetch-transaction" category="ONLINE (BLOCKEXPLORER.COM)" subcategory="BLOCKCHAIN QUERIES (blockexplorer.com)" stub="true">
    <option name="help" description="Get a transaction from blockexplorer.com." />
    <argument name="HASH" stream="true" type="bitcoin256" description="The transaction hash." />
    <define name="SX_BLKE_FETCH_TRANSACTION_NOT_IMPLEMENTED" value="This command is not yet ported from python." />
  </command>

  <command symbol="brainwallet" category="OFFLINE KEYS AND ADDRESSES" subcategory="BRAIN STORAGE" stub="true">
    <option name="help" description="Make a SHA256 private key from an arbitrary passphrase. Unsafe if passphrase is low in entropy. See diceware and xkcd for advice on entropy and generating a safe brainwallet." />
    <option name="algorithm" description="The algorithm (e.g. slowsha)." />
    <argument name="PASSWORD" required="true" description="The passphrase." />
    <argument name="USERNAME" description="A username." />
    <define name="SX_BRAINWALLET_NOT_IMPLEMENTED" value="This command is not yet ported from python." />
  </command>
  
  <command symbol="btc" category="UTILITY" subcategory="SATOSHI MATH" stub="true">
    <option name="help" description="Convert satoshi to BTC." />
    <argument name="SATOSHI" stream="true" type="uint64_t" description="The number of satoshi to convert."/>
    <define name="SX_BTC_NOT_IMPLEMENTED" value="This command is not yet ported from python." />
  </command>
  
  <!-- Computes the function a + G*b, where G is the curve's generator point.-->
  <command symbol="ec-add" category="UTILITY" subcategory="EC MATH">
    <option name="help" description="Calculate the elliptic curve function POINT + (SECRET * curve-generator-point)." />
    <argument name="POINT" required="true" type="ec_public" description="The point to add."/>
    <argument name="SECRET" required="true" type="ec_private" description="The hex or WIF encoded secret to add."/>
    <define name="SX_EC_ADD_OUT_OF_RANGE" value="Function exceeds valid range." />
  </command>

  <!-- Computes the function (a + b) % n, where n is the curve order. -->
  <command symbol="ec-add-secrets" category="UTILITY" subcategory="EC MATH">
    <option name="help" description="Calculate the elliptic curve function (SECRET + SECRET) % curve-order." />
    <argument name="SECRET" limit="-1" required="true" type="ec_private" description="The hex or WIF encoded secret to add."/>
    <define name="SX_EC_ADD_SECRETS_OUT_OF_RANGE" value="Sum exceeds valid range." />
  </command>

  <!-- Computes the product a * b. -->
  <command symbol="ec-multiply" category="UTILITY" subcategory="EC MATH">
    <option name="help" description="Calculate the elliptic curve product (POINT * SECRET)." />
    <argument name="POINT" required="true" type="ec_public" description="The point to multiply."/>
    <argument name="SECRET" required="true" type="ec_private" description="The hex or WIF encoded secret to multiply."/>
    <define name="SX_EC_MULITPLY_OUT_OF_RANGE" value="Product exceeds valid range." />
  </command>
  
  <!-- Computes the function (a * b) % n, where n is the curve order. -->
  <command symbol="ec-multiply-secrets" category="UTILITY" subcategory="EC MATH">
    <option name="help" description="Calculate the elliptic curve function (SECRET * SECRET) % curve-order." />
    <argument name="SECRET" limit="-1" required="true" type="ec_private" description="The hex or WIF encoded secret to multiply."/>
    <define name="SX_EC_MULITPLY_SECRETS_OUT_OF_RANGE" value="Function exceeds valid range." />
  </command>
  
  <!--
  <explanation value="$ cat my_sculpture.jpg | sx embed-addr" />
  <explanation value="1N9v8AKBqst9MNceV3gLmFKsgkKv1bZcBU" />
  <explanation value="Now send some Bitcoin to that address and it will be embedded in the blockchain as a record of the data passed in." />
  -->
  <command symbol="embed-addr" category="OFFLINE KEYS AND ADDRESSES" subcategory="BASIC" stub="true">
    <option name="help" description="Generate an address used for embedding a record of data into the blockchain." />
    <argument name="DATA" stream="true" description="The data of which to embed a record."/>
    <define name="SX_EMBED_ADDR_NOT_IMPLEMENTED" value="This command is not yet ported from python." />
  </command>
  
  <command symbol="fetch-header-hash" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES" obelisk="true">
    <option name="help" description="Get the raw block header from the specified hash. Requires a server connection." />
    <argument name="HASH" stream="true" type="bitcoin256" description="The hash of the block."/>
  </command>
  
  <command symbol="fetch-header-height" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES" obelisk="true">
    <option name="help" description="Get a raw block header from the specified height. Requires a server connection." />
    <argument name="HEIGHT" stream="true" type="size_t" description="The height of the block."/>
  </command>

  <command symbol="fetch-last-height" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES" obelisk="true">
    <option name="help" description="Get the last block height. Requires a server connection." />
  </command>
  
  <!-- BUGBUG: help/height option conflict, implement alias -->
  <command symbol="fetch-stealth" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES" obelisk="true">
    <option name="help" description="Get the stealth transactions matching the specified filter. Requires a server connection." />
    <option name="height" alias="t" type="size_t" description="The minimum height of transactions to include in the search."/>
    <argument name="BITFIELD" stream="true" type="uint32_t" description="The bit field of transactions to include in the search."/>
    <define name="SX_FETCH_STEALTH_OUTPUT" value="Ephemeral key: %1% Address: %2% Transaction hash: %3%\n" />
  </command>

  <command symbol="fetch-transaction" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES" obelisk="true">
    <option name="help" description="Get a transaction. Requires a server connection." />
    <argument name="HASH" stream="true" type="bitcoin256" description="The hash of the transaction." />
  </command>

  <command symbol="fetch-transaction-index" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES" obelisk="true">
    <option name="help" description="Get the block height and index of a transaction. Requires a server connection." />
    <argument name="HASH" stream="true" type="bitcoin256" description="The hash of the transaction." />
    <define name="SX_FETCH_TRANSACTION_INDEX_OUTPUT" value="Height: %1% Index: %2%\n" />
  </command>

  <command symbol="genaddr" category="OBSOLETE" subcategory="ELECTRUM STYLE DETERMINISTIC KEYS AND ADDRESSES" obsolete="true">
    <option name="help" description="Generate a Bitcoin address deterministically from an Electrum wallet." />
    <define name="SX_GENADDR_OBSOLETE" value="Electrum style key functions are obsolete." />
  </command>
  
  <command symbol="genpriv" category="OBSOLETE" subcategory="ELECTRUM STYLE DETERMINISTIC KEYS AND ADDRESSES" obsolete="true">
    <option name="help" description="Generate a private key deterministically from an Electrum seed." />
    <define name="SX_GENPRIV_OBSOLETE" value="Electrum style key functions are obsolete." />
  </command>

  <command symbol="genpub" category="OBSOLETE" subcategory="ELECTRUM STYLE DETERMINISTIC KEYS AND ADDRESSES"obsolete="true">
    <option name="help" description="Generate a public key deterministically from an Electrum wallet." />
    <define name="SX_GENPUB_OBSOLETE" value="Electrum style key functions are obsolete." />
  </command>

  <command symbol="get-pubkey" category="OFFLINE KEYS AND ADDRESSES" subcategory="BASIC" stub="true">
    <option name="help" description="Get the public key of an address." />
    <argument name="ADDRESS" stream="true" type="address" description="The address from which to derive the public key." />
    <define name="SX_GET_PUBKEY_NOT_IMPLEMENTED" value="This command is not yet ported from python." />
  </command>

  <command symbol="get-utxo" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES" stub="true" obelisk="true">
    <option name="help" description="Get enough unspent transaction outputs from a set of addresses to pay a number of satoshi. Requires a server connection." />
    <argument name="SATOSHI" stream="true" type="uint64_t" description="The number of satoshi." />
    <argument name="ADDRESS" limit="-1" type="address" description="The set of addresses." />
    <define name="SX_GET_UXTO_NOT_IMPLEMENTED" value="This command is not yet ported from python." />
  </command>

  <!-- BUGBUG: help/hard option conflict, implement alias -->
  <command symbol="hd-priv" category="OFFLINE KEYS AND ADDRESSES" subcategory="HD / BIP32">
    <option name="help" description="Create a HD private key from another HD private key." />
    <option name="hard" alias="d" description="Signal to create a hardened key." />
    <argument name="SECRET" stream="true" type="hd_private" description="The hex encoded HD private key." />
    <argument name="INDEX" type="uint32_t" description="The HD index, defaults to zero." />
    <!--<define name="SX_HD_PRIV_DERIVATION_ERROR" value="Child private key derivation failed." />-->
  </command>

  <!-- BUGBUG: help/hard option conflict, implement alias -->
  <command symbol="hd-pub" category="OFFLINE KEYS AND ADDRESSES" subcategory="HD / BIP32">
    <option name="help" description="Create a HD public key from another HD public or private key." />
    <option name="hard" alias="d" description="Signal to create a hardened key." />
    <argument name="KEY" stream="true" type="hd_key" description="The hex encoded HD public or private key." />
    <argument name="INDEX" type="uint32_t" description="The HD index, defaults to zero." />
    <!--<define name="SX_HD_PUB_DERIVATION_ERROR" value="Child public key derivation failed." />-->
    <define name="SX_HD_PUB_HARD_OPTION_CONFLICT" value="The hard option requires a private key." />
  </command>

  <command symbol="hd-seed" category="OFFLINE KEYS AND ADDRESSES" subcategory="HD / BIP32">
    <option name="help" description="Create a HD private key from entropy." />
    <argument name="SEED" stream="true" type="bytes" description="The hex encoded seed for the new key. If empty defaults to a random 32 byte value." />
  </command>

  <command symbol="hd-to-address" category="OFFLINE KEYS AND ADDRESSES" subcategory="HD / BIP32">
    <option name="help" description="Convert a HD public or private key to a Bitcoin address." />
    <argument name="KEY" stream="true" type="hd_key" description="The hex encoded HD public or private key." />
  </command>

  <command symbol="hd-to-wif" category="OFFLINE KEYS AND ADDRESSES" subcategory="HD / BIP32">
    <option name="help" description="Convert an HD private key to a WIF private key." />
    <argument name="SECRET" stream="true" type="hd_private" description="The hex encoded HD private key." />
  </command>
  
  <command symbol="history" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES" obelisk="true">
    <option name="help" description="Get list of output points, values, and spends for one or more Bitcoin addresses. Requires a server connection." />
    <option name="json" description="Enable JSON output." />
    <argument name="ADDRESS" limit="-1" type="address" description="The set of addresses." />
    <define name="SX_HISTORY_INVALID_ADDRESS" value="Invalid address '%1%'." />
    <define name="SX_HISTORY_PENDING" value="Pending" />
    <define name="SX_HISTORY_UNSPENT" value="Unspent" />
    <define name="SX_HISTORY_OUTPUT" value="Address: %1%\n  Output: %2%\n  Output height: %3%\n  Value: %4%\n  spend: %5%\n  Spend height: %6%\n" />
  </command>

  <command symbol="help" category="SX" subcategory="DOCUMENTATION">
    <argument name="COMMAND" stream="true" description="Get help for the COMMAND." />
    <define name="SX_HELP_NOT_COMMAND" value="The word '%1%' is not a sx command. All commands:" />
  </command>

  <command symbol="satoshi" category="UTILITY" subcategory="SATOSHI MATH" stub="true">
    <option name="help" description="Convert BTC to satoshi." />
    <argument name="BTC" stream="true" description="The value to convert."/>
    <define name="SX_SATOSHI_NOT_IMPLEMENTED" value="This command is not yet ported from python." />
  </command>
  
  <command symbol="stealth-addr" category="OFFLINE KEYS AND ADDRESSES" subcategory="STEALTH">
    <option name="help" description="Generate a stealth address." />
    <option name="reuse-key" description="Reuse the SCAN_PUBKEY as a SPEND_PUBKEY." />
    <option name="signatures" type="byte" description="Specify the number of signatures needed. Defaults to the number of SPEND_PUBKEYs provided." />
    <argument name="SCAN_KEY" type="bytes" required="true" description="The public key of the recipient." />
    <argument name="SPEND_KEY" type="bytes" limit="-1" description="The public key(s) that is/are spent to." />
  </command>

  <command symbol="unwrap" category="OFFLINE TRANSACTIONS" subcategory="SCRIPTING">
    <option name="help" description="Validate the checksum of a hex string and recover its version byte and data." />
    <argument name="HEX" stream="true" type="bytes" description="The hex string to unwrap." />
    <define name="SX_UNWRAP_INVALID_SIZE" value="The HEX argument size must be at least five bytes." />
    <define name="SX_UNWRAP_INVALID_CHECKSUM" value="The HEX argument checksum is not valid." />
  </command>

  <command symbol="wrap" category="OFFLINE TRANSACTIONS" subcategory="SCRIPTING">
    <option name="help" description="Add a version byte and checksum to a hex string." />
    <option name="version" type="byte" required="true" description="The desired version number." />
    <argument name="HEX" stream="true" type="bytes" description="The hex string to wrap." />
  </command>
  
  <!--<command symbol="stealth-initiate" category="OFFLINE KEYS AND ADDRESSES" subcategory="STEALTH">
    <description value="Initiate a new stealth payment." />
    <example value="sx stealth-initiate EPHEM_SECRET SCAN_PUBKEY SPEND_PUBKEY" />
    <explanation value="Initiate a new stealth payment." />
  </command>-->
  
</generate>