<?xml version = "1.0" ?>
<generate script="generate.gsl" language="en-us">

  <resource>
    <!-- General localizable resource strings. -->
    <!-- TODO: general this in the GSL template to incorporate format strings. -->
    <string name="sx_config_description" value="The path and file name for the configuration settings file for this application." />
  </resource>
  
  <configuration section="general">
    <!-- NOTE: we could move this into the obelisk section if it was dynamic. -->
    <!-- NOTE: we probably shouldn't use this setting since the fact is compiled into dependencies. -->
    <setting name="testnet" type="bool" description="Set to true in order to operate this application using Bitcoin testnet (vs. mainnet) addressing and blockchain data. This option is EXPERIMENTAL because other  libraries on which this application depends must currently be compiled with the testnet flag to ensure complete testnet semantics." />
  </configuration>
  <configuration section="obelisk">
    <!-- TODO: create serialized type for path and URI -->
    <setting name="client-certificate" type="path" description="The path to a private key certificate (file) that the server can use to prove the identity of this client. This is useful in authorizing remote administration of the server. The associated public key would need to be known by the server. Use the CZMQ program 'makecert' to generate the key certificate. For example: /home/genjix/.sx.cert" />
    <setting name="server-public-key" description="The public key of the server to which this application may connect. This must be the key for server specified by the 'service' option. For example: W=GRFxHUuUN#En3MI]f{}X:KWnV=pRZ$((byg=:h" />
    <setting name="service" default="tcp://obelisk.unsystem.net:8081" description="The URI of the server to which this application may connect." />
  </configuration>  

  <command symbol="help" category="SX" subcategory="DOCUMENTATION">
    <argument name="COMMAND" description="Get help for the COMMAND." />
  </command>
  
  <command symbol="stealth-addr" category="OFFLINE KEYS AND ADDRESSES" subcategory="STEALTH">
    <option name="help" description="Generate a stealth address from given input." />
    <option name="reuse-key" description="Reuse the SCAN_PUBKEY as a SPEND_PUBKEY." />
    <option name="signatures" type="byte" description="Specify the number of signatures needed. Defaults to the number of SPEND_PUBKEYs provided." />
    <argument name="SCAN_PUBKEY" type="bytes" required="true" description="The public key of the recipient." />
    <argument name="SPEND_PUBKEY" type="bytes" limit="-1" description="The public key that is spent to." />
  </command>
  
  <!--<command symbol="stealth-initiate" category="OFFLINE KEYS AND ADDRESSES" subcategory="STEALTH">
    <description value="Initiate a new stealth payment." />
    <example value="sx stealth-initiate EPHEM_SECRET SCAN_PUBKEY SPEND_PUBKEY" />
    <explanation value="Initiate a new stealth payment." />
  </command>-->
  
</generate>