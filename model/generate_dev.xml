<?xml version = "1.0" ?>
<generate script="generate.gsl" language="en-us">

  <!-- Resource strings for use by GSL template -->
  <resource>
    <string name="sx_config_description" value="The path and file name for the configuration settings file for this application." />
  </resource>
  
  <!-- Configuration file sections -->
  
  <configuration section="general">
    <!-- NOTE: we could move this into the obelisk section if it was dynamic. -->
    <!-- NOTE: we probably shouldn't use this setting since the fact is compiled into dependencies. -->
    <setting name="testnet" type="bool" description="Set to true in order to operate this application using Bitcoin testnet (vs. mainnet) addressing and blockchain data. This option is EXPERIMENTAL because other  libraries on which this application depends must currently be compiled with the testnet flag to ensure complete testnet semantics." />
  </configuration>
  
  <configuration section="obelisk">
    <!-- TODO: create serialized type for URI -->
    <setting name="client-certificate" type="path" description="The path to a private key certificate (file) that the server can use to prove the identity of this client. This is useful in authorizing remote administration of the server. The associated public key would need to be known by the server. Use the CZMQ program 'makecert' to generate the key certificate. For example: /home/genjix/.sx.cert" />
    <setting name="server-public-key" description="The public key of the server to which this application may connect. This must be the key for server specified by the 'service' option. For example: W=GRFxHUuUN#En3MI]f{}X:KWnV=pRZ$((byg=:h" />
    <setting name="service" default="tcp://obelisk.unsystem.net:8081" description="The URI of the server to which this application may connect." />
  </configuration>

  <!-- SX Commands -->
  
  <command symbol="addr" category="OFFLINE KEYS AND ADDRESSES" subcategory="BASIC">
    <option name="help" description="Convert a public key (hex bytes) or private key (hash or WIF) to a Bitcoin address." />
    <option name="version" type="byte" description="The desired address version." />
    <argument name="KEY" stream="true" description="A public or private key." />
    <define name="SX_ADDR_INVALID_KEY" value="Invalid public or private key '%1%'." />
  </command>

  <command symbol="balance" category="ONLINE (OBELISK)" subcategory="BLOCKCHAIN QUERIES" obelisk="true">
    <option name="help" description="Show the balance in satoshis of one or more Bitcoin addresses. Requires a server connection." />
    <option name="json" description="Enable JSON output." />
    <argument name="ADDRESS" limit="-1" description="The address to show." />
    <define name="SX_BALANCE_INVALID_ADDRESS" value="Invalid address." />
    <!--<explanation value="Example:" />
    <explanation value="" />
    <explanation value="  $ sx balance 134HfD2fdeBTohfx8YANxEpsYXsv5UoWyz" />
    <explanation value="  Address: 134HfD2fdeBTohfx8YANxEpsYXsv5UoWyz" />
    <explanation value="    Paid balance:    0" />
    <explanation value="    Pending balance: 0" />
    <explanation value="    Total received:  100000" />-->
  </command>

  <command symbol="help" category="SX" subcategory="DOCUMENTATION">
    <argument name="COMMAND" stream="true" description="Get help for the COMMAND." />
    <define name="SX_HELP_NOT_COMMAND" value="The word '%1%' is not a sx command. All commands:" />
  </command>
  
  <command symbol="stealth-addr" category="OFFLINE KEYS AND ADDRESSES" subcategory="STEALTH">
    <option name="help" description="Generate a stealth address from given input." />
    <option name="reuse-key" description="Reuse the SCAN_PUBKEY as a SPEND_PUBKEY." />
    <option name="signatures" type="byte" description="Specify the number of signatures needed. Defaults to the number of SPEND_PUBKEYs provided." />
    <argument name="SCAN_PUBKEY" type="bytes" required="true" description="The public key of the recipient." />
    <argument name="SPEND_PUBKEY" type="bytes" limit="-1" description="The public key that is spent to." />
  </command>

  <command symbol="base58check-decode" category="UTILITY" subcategory="FORMAT (BASE 58 CHECK)">
    <option name="help" description="Convert from Base58Check to hex string." />
    <argument name="BASE58CHECK" stream="true" description="The Base58Check encoded value to decode." />
    <define name="SX_BASE58CHECK_DECODE_NOT_IMPLEMENTED" value="This command is not yet ported from python." />
  </command>

  <command symbol="base58check-encode" category="UTILITY" subcategory="FORMAT (BASE 58 CHECK)">
    <option name="help" description="Convert from hex string to Base58Check." />
    <argument name="HEX" stream="true" type="bytes" description="The hex string to Base58Check encode." />
    <define name="SX_BASE58CHECK_ENCODE_NOT_IMPLEMENTED" value="This command is not yet ported from python." />
  </command>
  
  <command symbol="base58-decode" category="UTILITY" subcategory="FORMAT (BASE 58)">
    <option name="help" description="Convert from Base58 to hex string." />
    <argument name="BASE58" stream="true" description="The Base58 encoded value to decode." />
  </command>

  <command symbol="base58-encode" category="UTILITY" subcategory="FORMAT (BASE 58)">
    <option name="help" description="Convert from hex string to Base58." />
    <argument name="HEX" stream="true" type="bytes" description="The hex string to Base58 encode." />
  </command>
  
  <!--<command symbol="stealth-initiate" category="OFFLINE KEYS AND ADDRESSES" subcategory="STEALTH">
    <description value="Initiate a new stealth payment." />
    <example value="sx stealth-initiate EPHEM_SECRET SCAN_PUBKEY SPEND_PUBKEY" />
    <explanation value="Initiate a new stealth payment." />
  </command>-->
  
</generate>